name: "Terraform"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true
on:
  pull_request: {}
  workflow_dispatch: {}
  merge_group:

env:
  TF_CLOUD_ORGANIZATION: "perchnet"
  #TF_WORKSPACE: "proxmox"
  CONFIG_DIRECTORY: "./"

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      actions: read        # Required to identify workflow run.
      checks: write        # Required to add status summary.
      contents: read       # Required to checkout repository.
      pull-requests: write # Required to add PR comment.
      issues: write
    steps:
      - uses: actions/checkout@v4
      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1

      - name: Load secrets
        id: load-secrets
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false # Export loaded secrets as environment variables
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          TF_ENCRYPT_PASSPHRASE: "op://perchnet/tf_encrypt_passphrase/password"
          TF_API_TOKEN: "op://perchnet/terraform-token-github-actions/credential"
          TS_OAUTH_CLIENT_ID: "op://perchnet/tailscale-oauth-github-runner/username"
          TS_OAUTH_CLIENT_SECRET: "op://perchnet/tailscale-oauth-github-runner/credential"
          TF_VAR_onepassword_sdk_token: "op://perchnet/1p-terraform/credential"
          #SSH_PRIVATE_KEY: "op://perchnet/proxmox-ssh/private key?ssh-format=openssh"

      - name: Connect to Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ steps.load-secrets.outputs.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ steps.load-secrets.outputs.TS_OAUTH_CLIENT_SECRET }}
          tags: tag:github-runner
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          cli_config_credentials_token: ${{ steps.load-secrets.outputs.TF_API_TOKEN }}
      # - name: Setup SSH Agent
      #   uses: webfactory/ssh-agent@v0.9.0
      #   with:
      #       ssh-private-key: ${{ steps.load-secrets.outputs.SSH_PRIVATE_KEY }}
      - name: Init TF
        id: tf
        if: ${{ github.event_name == 'pull_request' }}
        uses: op5dev/tf-via-pr@v13
        with:
          #working-directory: .
          command: init
          arg-lock: false
          format: true
          validate: true

      - name: Setup TFLint
        if: ${{ github.event_name == 'pull_request' }}
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_wrapper: true

      - name: Run TFLint
        id: tflint
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          tflint --init
          tflint --format compact
        continue-on-error: true

      - name: Comment if TFLint errors
        if: ${{ github.event_name == 'pull_request' && steps.tflint.outputs.exitcode != 0 }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Compose TFLint output.
          tflint='${{ steps.tflint.outputs.stderr || steps.tflint.outputs.stdout }}'
          tflint="### TFLint errors:
          <details><summary>TFLint error.</summary>

          \`\`\`hcl
          $(echo "$tflint" | sed 's/`/\\`/g')
          \`\`\`
          </details>"

          # Get body of PR comment from tf step output.
          comment=$(gh api /repos/{owner}/{repo}/issues/comments/${{ steps.tf.outputs.comment-id }} --method GET --jq '.body')

          # Replace placeholder with TFLint output.
          comment="${comment//<!-- placeholder-2 -->/$tflint}"

          # Update PR comment combined with TFLint output.
          gh api /repos/{owner}/{repo}/issues/comments/${{ steps.tf.outputs.comment-id }} --method PATCH --field body="$comment"

          # Exit workflow due to TFLint error.
          # exit 1

      - uses: op5dev/tf-via-pr@v13
        env:
          TF_VAR_onepassword_sdk_token: ${{ steps.load-secrets.outputs.TF_VAR_onepassword_sdk_token }}
        with:
          working-directory: .
          command: ${{ (github.event_name == 'merge_group' || github.event_name == 'push') && 'apply' || 'plan' }}
          arg-lock: ${{ (github.event_name == 'merge_group' || github.event_name == 'push') }}
          format: true
          arg-refresh: ${{ (github.event_name == 'merge_group' || github.event_name == 'push') && 'false' || 'true' }} # Skip refresh on apply.
          expand-diff: true
          plan-parity: true
          plan-encrypt: ${{ steps.load-secrets.outputs.TF_ENCRYPT_PASSPHRASE }}
          comment-method: recreate
